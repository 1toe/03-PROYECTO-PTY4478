import { useState } from 'react';
import { AIProductService, AIProductQuery } from '../services/ai/ai-product.service';
import { geminiService } from '../services/ai/gemini.service';
import { Producto } from '../services/supabase/product.service';

interface AIResponse {
    message: string;
    products?: Producto[];
    isProductSearch?: boolean;
}

export const useAIWithProducts = () => {
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const processMessage = async (message: string): Promise<AIResponse> => {
        setIsLoading(true);
        setError(null);

        try {            // Detectar si el mensaje est√° relacionado con b√∫squeda de productos
            // Palabras clave adaptadas a los productos en la base de datos Supabase
            const productSearchKeywords = [
                'buscar', 'producto', 'encontrar', 'precio', 'oferta', 'marca', 'categor√≠a',
                'comprar', 'd√≥nde', 'cu√°nto cuesta', 'recomendaci√≥n', 'alimento', 'comida',
                // Palabras relacionadas con productos saludables
                'saludable', 'saludables', 'sin sellos', 'sin advertencia', 'productos sanos',
                'libre de sellos', 'sin etiquetas', 'productos naturales', 'con sellos', 'con advertencia',
                // Categor√≠as espec√≠ficas de la base de datos
                'aceitunas', 'encurtidos', 'az√∫car', 'cereales', 'condimentos', 'fideos', 'pastas',
                'frutos secos', 'galletas', 'ketchup', 'mayonesa', 'mostaza', 'papas fritas',
                'platos', 'ensaladas', 'salsa', 'sandwich', 'tortillas', 'comida √°rabe', 'comida thai'
            ];

            const isProductRelated = productSearchKeywords.some(keyword =>
                message.toLowerCase().includes(keyword)
            );

            if (isProductRelated) {
                return await handleProductSearch(message);
            } else {
                return await handleGeneralAIChat(message);
            }
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : 'Error desconocido';
            console.error('Error en processMessage:', errorMessage);
            setError(errorMessage);

            // Determinar si el error est√° relacionado con la b√∫squeda de productos
            const isProductRelated = message.toLowerCase().includes('producto') ||
                message.toLowerCase().includes('buscar') ||
                message.toLowerCase().includes('encontrar');

            if (isProductRelated) {
                return {
                    message: `üì¢ **Lo siento, tuve un problema buscando esos productos**

Parece que hubo un error t√©cnico al procesar tu consulta. Esto puede ocurrir cuando:

‚Ä¢ La consulta contiene caracteres especiales
‚Ä¢ Los t√©rminos de b√∫squeda son muy ambiguos
‚Ä¢ Hay un problema temporal en el servicio

üí° **Sugerencia:** Intenta buscar con t√©rminos m√°s sencillos como "pan", "leche" o una categor√≠a espec√≠fica.

¬øQuieres probar con otra b√∫squeda? üõí`,
                    isProductSearch: true
                };
            } else {
                return {
                    message: 'Lo siento, ocurri√≥ un error al procesar tu mensaje. Por favor, intenta de nuevo con una consulta m√°s simple o espec√≠fica.',
                    isProductSearch: false
                };
            }
        } finally {
            setIsLoading(false);
        }
    };

    const handleProductSearch = async (message: string): Promise<AIResponse> => {
        // Extraer informaci√≥n de b√∫squeda del mensaje
        let query = extractSearchQuery(message);
        console.log('T√©rminos de b√∫squeda extra√≠dos:', query.query);

        try {
            // Intento inicial de b√∫squeda
            let result;
            try {
                result = await AIProductService.searchProductsForAI(query);
            } catch (searchError) {
                console.warn('Error en la b√∫squeda inicial:', searchError);
                
                // No intentar con t√©rminos m√°s generales
                // Usar un resultado vac√≠o para que Gemini genere una respuesta personalizada
                result = {
                    products: [],
                    summary: {
                        total: 0,
                        categories: [],
                        priceRange: { min: 0, max: 0 },
                        onOfferCount: 0,
                        withWarningsCount: 0
                    }
                };
            }

            if (result.products.length === 0) {
                // Si Gemini est√° configurado, usarlo para generar una respuesta personalizada para b√∫squedas sin resultados
                if (geminiService.isConfigured()) {
                    // Detectar si era una b√∫squeda de productos saludables
                    const isHealthySearch = message.toLowerCase().includes('sin sellos') ||
                        message.toLowerCase().includes('sin advertencia') ||
                        message.toLowerCase().includes('saludable');

                    // Lista completa de categor√≠as disponibles en la base de datos
                    const availableCategories = [
                        'Aceitunas Y Encurtidos', 'Az√∫car', 'Cereales Y Funcionales', 'Condimentos',
                        'Fideos Y Pastas', 'Frutos Secos', 'Galletas C√≥ctel', 'Ketchup',
                        'Mayonesa', 'Mostaza', 'Papas Fritas', 'Platos Y Ensaladas',
                        'Salsa Para Pastas', 'Salsa Picante', 'Salsa De Soya', 'Otras Salsas',
                        'Sandwich Y Tortillas', 'Comida √Årabe', 'Comida Thai'
                    ];
                    
                    // T√©rminos populares que sabemos que funcionan bien con nuestra base de datos
                    const popularSearchTerms = [
                        'cereales', 'galletas', 'pasta', 'fideos', 'aceitunas', 'salsas',
                        'condimentos', 'mayonesa', 'ketchup', 'mostaza', 'papas fritas',
                        'snacks', 'ensaladas', 'sandwiches', 'frutos secos'
                    ];
                    
                    const systemPrompt = `Eres el asistente de FoodYou, especializado en b√∫squeda de productos alimenticios en supermercados chilenos.
Genera una respuesta amable y √∫til para una b√∫squeda de productos que no tuvo resultados.
Incluye emojis relevantes y sugerencias espec√≠ficas y pr√°cticas.
Usa formato Markdown para estructurar tu respuesta.

IMPORTANTE - RESTRICCIONES:
1. SOLO sugieras buscar productos que existan en nuestra base de datos
2. NUNCA inventes productos espec√≠ficos ni marcas que podr√≠an no existir
3. SIEMPRE recomienda t√©rminos de b√∫squeda generales y validados de la lista que te proporcionamos

Tu objetivo es guiar al usuario a una b√∫squeda exitosa, no generar falsas expectativas.`;

                    let contextInfo = `El usuario busc√≥: "${message}"
T√©rminos de b√∫squeda extra√≠dos: "${query.query}"
No se encontraron productos que coincidan con esta b√∫squeda.

Categor√≠as disponibles en nuestra base de datos:
${availableCategories.join(', ')}

T√©rminos de b√∫squeda populares que funcionan bien:
${popularSearchTerms.join(', ')}`;

                    if (isHealthySearch) {
                        contextInfo += `\nLa b√∫squeda estaba relacionada con productos saludables o sin sellos de advertencia.
Sugerencias espec√≠ficas para b√∫squeda de productos saludables:
- Categor√≠as con opciones saludables: cereales, galletas, condimentos
- Buscar por "productos sin sellos" para ver todas las opciones saludables
- T√©rminos espec√≠ficos que funcionan: "cereales sin sellos", "galletas sin sellos", "productos saludables"`;
                    }

                    const geminiResponse = await geminiService.generateResponse({
                        message: `Genera una respuesta √∫til para explicar que no encontramos resultados y sugerir alternativas`,
                        contextInfo,
                        systemPrompt
                    });

                    return {
                        message: geminiResponse.text,
                        products: [],
                        isProductSearch: true
                    };
                } else {
                    // Fallback a respuestas predefinidas si Gemini no est√° configurado
                    const isHealthySearch = message.toLowerCase().includes('sin sellos') ||
                        message.toLowerCase().includes('sin advertencia') ||
                        message.toLowerCase().includes('saludable');

                    if (isHealthySearch) {
                        return {
                            message: `üå± **B√∫squeda de productos saludables**

Lo siento, no encontr√© productos sin sellos de advertencia que coincidan con "${query.query}".

üí° **Sugerencias:**
‚Ä¢ Intenta con categor√≠as m√°s amplias: "cereales", "galletas", "condimentos"
‚Ä¢ Busca marcas espec√≠ficas conocidas por productos saludables
‚Ä¢ Prueba con "productos sin sellos" para ver todas las opciones saludables disponibles

üîç **Alternativas:**
‚Ä¢ Buscar solo "productos saludables" 
‚Ä¢ Explorar por categor√≠as: "cereales saludables", "galletas sin sellos"
‚Ä¢ Ver ofertas de productos sin advertencias

¬øTe gustar√≠a que busque en una categor√≠a espec√≠fica de productos saludables? ü•ó`,
                            products: [],
                            isProductSearch: true
                        };
                    }

                    return {
                        message: `üîç No encontr√© productos que coincidan con "${query.query}". 

üí° **Sugerencias:**
‚Ä¢ Intenta con t√©rminos m√°s generales (ej: "yogurt" en lugar de "yogurt griego sabor frutilla")
‚Ä¢ Revisa la ortograf√≠a
‚Ä¢ Prueba con sin√≥nimos o marcas espec√≠ficas

¬øHay algo m√°s espec√≠fico que te gustar√≠a buscar?`,
                        products: [],
                        isProductSearch: true
                    };
                }
            }

            // Hay resultados de productos - Preparar informaci√≥n
            let productsInfo = "";
            result.products.slice(0, 10).forEach((product, index) => {
                productsInfo += `${index + 1}. ${product.nombre_producto || product.name_vtex || product.name_okto}\n`;
                if (product.marca || product.brand_name) {
                    productsInfo += `   Marca: ${product.marca || product.brand_name}\n`;
                }
                if (product.precio || product.price_current) {
                    const price = product.precio || parseFloat(product.price_current || '0');
                    productsInfo += `   Precio: $${price.toLocaleString('es-CL')}`;
                    if (product.en_oferta || product.is_in_offer) {
                        productsInfo += ` (En oferta)`;
                    }
                    productsInfo += '\n';
                }
                if (product.warnings && product.warnings.length > 0) {
                    productsInfo += `   Sellos: ${product.warnings.length} (${product.warnings.map(w => w.description || w.warning_code).join(', ')})\n`;
                }
                productsInfo += '\n';
            });

            // Agregar informaci√≥n del resumen
            const summary = result.summary;
            productsInfo += `Resumen de resultados:\n`;
            productsInfo += `- Total de productos: ${summary.total}\n`;
            if (summary.onOfferCount > 0) {
                productsInfo += `- Productos en oferta: ${summary.onOfferCount}\n`;
            }
            if (summary.priceRange.min > 0 && summary.priceRange.max > 0) {
                productsInfo += `- Rango de precios: $${summary.priceRange.min.toLocaleString()} a $${summary.priceRange.max.toLocaleString()}\n`;
            }
            if (summary.categories.length > 0) {
                productsInfo += `- Categor√≠as: ${summary.categories.join(', ')}\n`;
            }

            // Ya no usamos NLPUtils para sugerencias
            // Podemos agregar sugerencias simples basadas en la consulta si es necesario
            if (query.query.length < 3) {
                productsInfo += `\nSugerencia: Prueba con t√©rminos de b√∫squeda m√°s espec√≠ficos.\n`;
            }

            // Generar respuesta usando Gemini o fallback
            let finalResponse;
            if (geminiService.isConfigured()) {
                // Lista completa de categor√≠as disponibles en la base de datos
                const availableCategories = [
                    'Aceitunas Y Encurtidos', 'Az√∫car', 'Cereales Y Funcionales', 'Condimentos',
                    'Fideos Y Pastas', 'Frutos Secos', 'Galletas C√≥ctel', 'Ketchup',
                    'Mayonesa', 'Mostaza', 'Papas Fritas', 'Platos Y Ensaladas',
                    'Salsa Para Pastas', 'Salsa Picante', 'Salsa De Soya', 'Otras Salsas',
                    'Sandwich Y Tortillas', 'Comida √Årabe', 'Comida Thai'
                ];
                
                const systemPrompt = `Eres el asistente de FoodYou, especializado en b√∫squeda de productos alimenticios en supermercados chilenos.
Genera una respuesta amigable y profesional que presente los resultados de b√∫squeda de productos.
Usa Markdown para enfatizar informaci√≥n importante.

ESTRUCTURA tu respuesta con estas secciones:
1. RESUMEN de resultados (cantidad, rango de precios, ofertas)
2. DESTACAR caracter√≠sticas importantes:
   - Precios y ofertas especiales
   - Productos sin sellos de advertencia nutricional (si hay)
   - Categor√≠as representadas
3. SUGERENCIAS basadas S√ìLO en las categor√≠as encontradas en estos resultados
4. PREGUNTA final invitando al usuario a explorar m√°s productos o refinar su b√∫squeda

IMPORTANTE:
- SOLO sugieras categor√≠as que aparecieron en los resultados actuales o de la lista validada
- NUNCA inventes productos espec√≠ficos ni marcas
- Incluye emojis relevantes para hacer la respuesta m√°s amigable
- Usa un tono cercano y positivo`;

                // Extraer las categor√≠as reales encontradas en esta b√∫squeda
                const foundCategories = result.summary.categories || [];
                
                // Informaci√≥n adicional para el contexto
                const contextualInfo = `
Categor√≠as encontradas: ${foundCategories.join(', ')}

Estad√≠sticas adicionales:
- Total de productos mostrados: ${result.products.slice(0, 10).length} de ${result.summary.total}
- Productos en oferta: ${result.summary.onOfferCount}
- Productos con sellos de advertencia: ${result.summary.withWarningsCount}
- Rango de precios: $${result.summary.priceRange.min.toLocaleString()} a $${result.summary.priceRange.max.toLocaleString()}

Consulta original del usuario: "${message}"
T√©rminos de b√∫squeda procesados: "${query.query}"
`;

                const geminiResponse = await geminiService.generateResponse({
                    message: `Genera un resumen de los resultados de b√∫squeda para "${query.query}" que sea √∫til e informativo`,
                    contextInfo: productsInfo + "\n" + contextualInfo,
                    systemPrompt
                });

                finalResponse = geminiResponse.text;
            } else {
                // Fallback a la respuesta generada program√°ticamente
                finalResponse = generateProductSearchResponse(message, result);
            }

            return {
                message: finalResponse,
                products: result.products.slice(0, 10), // Limitar a 10 productos para mejor visualizaci√≥n
                isProductSearch: true
            };

        } catch (error) {
            console.error('Error en product search:', error);
            throw error;
        }
    };

    const handleGeneralAIChat = async (message: string): Promise<AIResponse> => {
        try {
            // Si Gemini est√° configurado, usarlo para generar una respuesta
            if (geminiService.isConfigured()) {
                // Lista completa de categor√≠as disponibles en la base de datos
                const availableCategories = [
                    'Aceitunas Y Encurtidos', 'Az√∫car', 'Cereales Y Funcionales', 'Condimentos',
                    'Fideos Y Pastas', 'Frutos Secos', 'Galletas C√≥ctel', 'Ketchup',
                    'Mayonesa', 'Mostaza', 'Papas Fritas', 'Platos Y Ensaladas',
                    'Salsa Para Pastas', 'Salsa Picante', 'Salsa De Soya', 'Otras Salsas',
                    'Sandwich Y Tortillas', 'Comida √Årabe', 'Comida Thai'
                ];
                
                const systemPrompt = `Eres el asistente de FoodYou, especializado en nutrici√≥n, alimentaci√≥n y b√∫squeda de productos alimenticios en supermercados chilenos.
Tus respuestas son amables, informativas y concisas.
Incluye emojis relevantes para hacer tus respuestas m√°s amigables.
Usa formato Markdown para estructurar tus respuestas.

IMPORTANTE: Solo puedes sugerir buscar productos que existan en nuestra base de datos. Las categor√≠as disponibles son:
${availableCategories.join(', ')}

Cuando te pregunten por productos espec√≠ficos:
1. SOLO sugerir b√∫squedas para categor√≠as de la lista anterior
2. NO inventar nombres de productos espec√≠ficos ni marcas que podr√≠an no existir
3. Recomendar t√©rminos de b√∫squeda gen√©ricos como "cereales", "pastas", "galletas", etc.

Para consejos de nutrici√≥n o alimentaci√≥n:
1. Basa tus respuestas en informaci√≥n nutricional fundamentada
2. Relaciona tus recomendaciones con productos que s√≠ tenemos disponibles
3. No hagas afirmaciones m√©dicas espec√≠ficas

Evita dar consejos m√©dicos profesionales, siempre recomienda consultar a un profesional de la salud cuando sea apropiado.`;

                const geminiResponse = await geminiService.generateResponse({
                    message,
                    systemPrompt
                });

                return {
                    message: geminiResponse.text,
                    isProductSearch: false
                };
            } else {
                // Fallback si Gemini no est√° disponible
                return {
                    message: `Lo siento, necesito una conexi√≥n a la API de IA para responder preguntas generales. 
                    
¬øTe gustar√≠a buscar alg√∫n producto espec√≠fico? Puedo ayudarte con eso. üõí`,
                    isProductSearch: false
                };
            }
        } catch (error) {
            console.error('Error en general AI chat:', error);
            throw error;
        }
    };

    /**
     * Genera una respuesta formateada para los resultados de b√∫squeda
     */
    const generateProductSearchResponse = (message: string, result: any): string => {
        const summary = result.summary;
        const products = result.products.slice(0, 10);

        let response = `üõí **Resultados para "${message.trim()}"**\n\n`;

        if (products.length === 0) {
            return `üîç No encontr√© productos que coincidan con tu b√∫squeda "${message.trim()}". ¬øQuieres intentar con otros t√©rminos?`;
        }

        response += `Encontr√© ${summary.total} producto${summary.total !== 1 ? 's' : ''} `;

        if (summary.onOfferCount > 0) {
            response += `(${summary.onOfferCount} en oferta) `;
        }

        if (summary.priceRange.min > 0 && summary.priceRange.max > 0) {
            response += `con precios entre $${summary.priceRange.min.toLocaleString()} y $${summary.priceRange.max.toLocaleString()}`;
        }

        response += `.\n\n`;

        // A√±adir informaci√≥n de sellos y categor√≠as
        if (summary.categories.length > 0) {
            response += `**Categor√≠as**: ${summary.categories.join(', ')}\n`;
        }

        if (summary.warningCount === 0) {
            response += `‚Ä¢ Todos los productos mostrados est√°n libres de sellos de advertencia nutricional üå±\n`;
        } else {
            const warningDescriptions = ["Alto en Calor√≠as", "Alto en Grasas Saturadas", "Alto en Sodio", "Alto en Az√∫cares"];
            response += `‚Ä¢ Los productos con ‚ö†Ô∏è tienen sellos de advertencia nutricional. Por ejemplo: ${warningDescriptions.join(', ')}\n`;
        }

        if (summary.onOfferCount > 0) {
            response += `‚Ä¢ Los precios en rojo indican ofertas especiales\n`;
        }

        response += `\n¬øTe gustar√≠a buscar algo m√°s espec√≠fico? üõí`;

        return response;
    };

    /**
     * Extrae t√©rminos de b√∫squeda y filtros a partir del mensaje del usuario
     * Versi√≥n mejorada con validaci√≥n contra categor√≠as conocidas
     */
    const extractSearchQuery = (message: string): AIProductQuery => {
        // Categor√≠as v√°lidas en la base de datos (todas en min√∫sculas para comparaci√≥n)
        const validCategories = [
            'aceitunas', 'encurtidos', 'az√∫car', 'cereales', 'funcionales', 'condimentos',
            'fideos', 'pastas', 'frutos secos', 'galletas', 'c√≥ctel', 'ketchup',
            'mayonesa', 'mostaza', 'papas fritas', 'platos', 'ensaladas', 
            'salsa', 'salsas', 'sandwich', 'tortillas', 'comida √°rabe', 'comida thai'
        ];
        
        // Marcas conocidas en la base de datos (todas en min√∫sculas para comparaci√≥n)
        const knownBrands = [
            'carozzi', 'lucchetti', 'malloa', 'watts', 'colun', 'soprole',
            'nestl√©', 'lays', 'evercrisp', 'marco polo', 'fruna', 'dos caballos',
            'wasil', 'cuisine & co', 'jumbo', 'unimarc', 'santa isabel'
        ];

        // Primera limpieza b√°sica para detectar t√©rminos de b√∫squeda
        const lowerMessage = message.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "").replace(/[^a-z0-9\s]/g, " ");

        // Limpieza b√°sica del mensaje original
        let searchTerms = message
            .replace(/[,.;:?¬ø!¬°'"\\%_:@<>(){}[\]|=+*&^$#!~`]/g, ' ') // Reemplazar puntuaci√≥n y caracteres especiales
            .replace(/\s+/g, ' ')             // Normalizar espacios
            .trim();

        // Remover palabras comunes de b√∫squeda que no aportan valor
        const removeWords = ['buscar', 'busca', 'busco', 'encuentro', 'encuentra', 'producto', 'productos',
            'quiero', 'necesito', 'me puedes', 'puedes', 'mostrar', 'ver', 'sugiereme', 'sugiere',
            'recomiendame', 'recomienda', 'quiero', 'dame', 'encuentrame', 'hay', 'tienen'];

        removeWords.forEach(word => {
            const regex = new RegExp(`\\b${word}\\b`, 'gi');
            searchTerms = searchTerms.replace(regex, '').trim();
        });

        // Sanitizar los t√©rminos de b√∫squeda para evitar errores SQL
        searchTerms = searchTerms
            // Eliminar TODOS los caracteres problem√°ticos para SQL y la API de Supabase
            .replace(/[,.;:?¬ø!¬°'"\\%_:@<>(){}[\]|=+*&^$#!~`]/g, ' ')  // Reemplazar puntuaci√≥n con espacios
            .replace(/\s+/g, ' ')               // Normalizar espacios
            .trim();                            // Eliminar espacios al inicio/final

        // Verificar si alguna palabra coincide con categor√≠as conocidas
        const searchTermsLower = searchTerms.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
        const words = searchTermsLower.split(' ');
        
        // Buscar palabras clave de categor√≠a en la consulta
        let foundCategory = '';
        for (const category of validCategories) {
            if (searchTermsLower.includes(category)) {
                foundCategory = category;
                console.log(`Categor√≠a identificada en la consulta: ${foundCategory}`);
                break;
            }
        }
        
        // Buscar marcas conocidas en la consulta
        let foundBrand = '';
        for (const brand of knownBrands) {
            if (searchTermsLower.includes(brand)) {
                foundBrand = brand;
                console.log(`Marca identificada en la consulta: ${foundBrand}`);
                break;
            }
        }
        
        // Verificaci√≥n extra de seguridad
        if (!searchTerms || searchTerms.trim().length < 2) {
            // Si se identific√≥ una categor√≠a o marca v√°lida, usarla como t√©rmino de b√∫squeda
            if (foundCategory) {
                searchTerms = foundCategory;
            } else if (foundBrand) {
                searchTerms = foundBrand;
            } else {
                searchTerms = 'productos';
            }
        }

        // Detectar filtros en el mensaje
        const filters: AIProductQuery['filters'] = {};

        // Patrones espec√≠ficos para detectar productos SIN sellos de advertencia (saludables)
        const healthyPatterns = [
            /\b(sin|libre\s+de)\s+(sello|sellos|advertencia|advertencias|etiquetas)\b/i,
            /\b(producto|productos)\s+(sano|sanos|saludable|saludables|natural|naturales)\b/i,
            /\b(no\s+tienen|que\s+no\s+tengan)\s+(sello|sellos|advertencia|advertencias|etiquetas)\b/i,
            /\b(saludable|saludables)\b/i
        ];
        
        // Detectar productos SIN sellos de advertencia (saludables)
        const isHealthySearch = healthyPatterns.some(pattern => pattern.test(lowerMessage));
        if (isHealthySearch) {
            filters.hasWarnings = false;
            console.log('B√∫squeda de productos saludables (sin sellos) detectada');

            // Remover t√©rminos relacionados con sellos de los t√©rminos de b√∫squeda
            const warningTerms = ['sin sellos', 'sin sello', 'libre de sellos', 'sin advertencia', 
                                 'sin advertencias', 'sin etiquetas', 'no tienen sellos', 
                                 'sin', 'libre', 'de', 'sanos', 'naturales'];
            warningTerms.forEach(term => {
                searchTerms = searchTerms.replace(new RegExp(`\\b${term}\\b`, 'gi'), ' ').trim();
            });

            // Si qued√≥ vac√≠o despu√©s de limpiar, buscar todos los productos saludables
            if (!searchTerms || searchTerms.trim().length === 0) {
                searchTerms = 'productos';
                console.log('T√©rminos de b√∫squeda vac√≠os, usando "productos" como fallback');
            }
        }

        // Patrones espec√≠ficos para detectar productos CON sellos de advertencia
        const unhealthyPatterns = [
            /\b(con|que\s+tienen)\s+(sello|sellos|advertencia|advertencias|etiquetas)\b/i,
            /\b(producto|productos)\s+(no\s+saludable|no\s+saludables|con\s+advertencias)\b/i
        ];
        
        // Detectar productos CON sellos de advertencia (para informaci√≥n)
        const isUnhealthySearch = unhealthyPatterns.some(pattern => pattern.test(lowerMessage));
        if (isUnhealthySearch) {
            filters.hasWarnings = true;
            console.log('B√∫squeda de productos con sellos de advertencia detectada');

            // Remover t√©rminos relacionados con sellos de los t√©rminos de b√∫squeda
            const warningTerms = ['con sellos', 'con sello', 'con advertencia', 
                                 'con advertencias', 'con etiquetas', 'que tienen sellos',
                                 'con', 'que', 'tienen'];
            warningTerms.forEach(term => {
                searchTerms = searchTerms.replace(new RegExp(`\\b${term}\\b`, 'gi'), ' ').trim();
            });

            if (!searchTerms || searchTerms.trim().length === 0) {
                searchTerms = 'productos';
                console.log('T√©rminos de b√∫squeda vac√≠os, usando "productos" como fallback');
            }
        }

        // Patrones para detectar ofertas
        const offerPatterns = [
            /\b(oferta|ofertas|descuento|descuentos|rebaja|rebajas)\b/i,
            /\b(barato|baratos|econ√≥mico|econ√≥micos|promoci√≥n|promociones)\b/i,
            /\b(precio\s+especial|precios\s+especiales)\b/i
        ];
        
        // Detectar ofertas
        const isOfferSearch = offerPatterns.some(pattern => pattern.test(lowerMessage));
        if (isOfferSearch) {
            filters.isOnOffer = true;
            console.log('B√∫squeda de productos en oferta detectada');
        }

        // Detectar rangos de precio con patrones m√°s robustos
        const maxPricePatterns = [
            /(?:menos\s+de|hasta|maximo|m√°ximo)\s*\$?\s*(\d[\d.,]*)/i,
            /(?:no\s+m√°s\s+de|que\s+no\s+pasen\s+de)\s*\$?\s*(\d[\d.,]*)/i,
            /(?:menos|inferior|bajo|barato)\s+que\s*\$?\s*(\d[\d.,]*)/i,
            /\$\s*(\d[\d.,]*)\s+(?:o\s+menos|m√°ximo|como\s+m√°ximo)/i
        ];
        
        for (const pattern of maxPricePatterns) {
            const match = lowerMessage.match(pattern);
            if (match && match[1]) {
                // Limpiar cualquier separador de miles y usar punto como decimal
                const cleanPrice = match[1].replace(/\./g, '').replace(/,/g, '.');
                filters.maxPrice = parseFloat(cleanPrice);
                console.log(`Precio m√°ximo detectado: $${filters.maxPrice}`);
                break;
            }
        }

        const minPricePatterns = [
            /(?:m√°s\s+de|desde|minimo|m√≠nimo)\s*\$?\s*(\d[\d.,]*)/i,
            /(?:superior|mayor|m√°s\s+caro)\s+que\s*\$?\s*(\d[\d.,]*)/i,
            /\$\s*(\d[\d.,]*)\s+(?:o\s+m√°s|como\s+m√≠nimo|m√≠nimo)/i
        ];
        
        for (const pattern of minPricePatterns) {
            const match = lowerMessage.match(pattern);
            if (match && match[1]) {
                // Limpiar cualquier separador de miles y usar punto como decimal
                const cleanPrice = match[1].replace(/\./g, '').replace(/,/g, '.');
                filters.minPrice = parseFloat(cleanPrice);
                console.log(`Precio m√≠nimo detectado: $${filters.minPrice}`);
                break;
            }
        }

        // Detectar marcas con un patr√≥n m√°s robusto
        const brandPatterns = [
            /\b(?:marca|brand)\s+([a-z√±√°√©√≠√≥√∫√º]+)\b/i,
            /\bde\s+(?:la\s+)?(?:marca|brand)\s+([a-z√±√°√©√≠√≥√∫√º]+)\b/i,
            /\b(carozzi|lucchetti|malloa|watts|colun|soprole|nestle|nestl√©|lays|evercrisp|fruna)\b/i
        ];
        
        for (const pattern of brandPatterns) {
            const match = lowerMessage.match(pattern);
            if (match && match[1]) {
                filters.brand = match[1].toLowerCase();
                console.log(`Marca detectada: ${filters.brand}`);
                break;
            }
        }

        // Detectar categor√≠as espec√≠ficas de la base de datos
        const categoryKeywords = [
            'aceitunas', 'encurtidos', 'az√∫car', 'cereales', 'condimentos', 'fideos', 'pastas',
            'frutos secos', 'galletas', 'ketchup', 'mayonesa', 'mostaza', 'papas fritas',
            'platos', 'ensaladas', 'salsa', 'sandwich', 'tortillas', 'comida √°rabe', 'comida thai'
        ];

        for (const category of categoryKeywords) {
            if (lowerMessage.includes(category)) {
                // No establecemos directamente la categor√≠a aqu√≠, pero podemos
                // asegurarnos de que el t√©rmino de b√∫squeda incluya la categor√≠a
                if (!searchTerms.toLowerCase().includes(category)) {
                    searchTerms = searchTerms ? `${searchTerms} ${category}` : category;
                }
                break;
            }
        }

        // Limpiar t√©rminos de b√∫squeda finales
        searchTerms = searchTerms.replace(/\s+/g, ' ').trim();

        // Si despu√©s de toda la limpieza no tenemos t√©rminos v√°lidos, extraer palabras clave o usar un fallback
        if (!searchTerms || searchTerms.length < 2) {
            const keywords = extractKeyWords(message);
            searchTerms = keywords || 'productos';
        }

        // Limitar longitud para evitar problemas
        searchTerms = searchTerms.substring(0, 50);

        console.log('T√©rminos de b√∫squeda finales:', searchTerms);

        return {
            query: searchTerms,
            filters: Object.keys(filters).length > 0 ? filters : undefined,
            limit: 20
        };
    };

    const extractKeyWords = (message: string): string => {
        // Lista completa de categor√≠as y t√©rminos validados de la base de datos
        const validatedKeywords = [
            // Categor√≠as principales
            'aceitunas', 'encurtidos', 'az√∫car', 'cereales', 'condimentos', 'fideos', 'pastas',
            'frutos secos', 'galletas', 'ketchup', 'mayonesa', 'mostaza', 'papas fritas',
            'platos', 'ensaladas', 'salsa', 'sandwich', 'tortillas', 'comida √°rabe', 'comida thai',
            
            // Subcategor√≠as y t√©rminos espec√≠ficos
            'aceite', 'aceituna', 'olivas', 'pickles', 'pepinillos',
            'endulzante', 'stevia', 'sucralosa', 'edulcorante', 'miel',
            'avena', 'granola', 'muesli', 'corn flakes',
            'especia', 'pimienta', 'oregano', 'or√©gano', 'comino', 'curry', 'ajo', 'canela', 'vainilla', 'sal',
            'tallarines', 'spaghetti', 'macarrones', 'lasa√±a',
            'nueces', 'almendras', 'man√≠', 'pistachos', 'casta√±as', 'pasas', 'semillas',
            'crackers', 'bizcochos', 'cookie', 'cookies',
            'catsup', 'tomate', 'pesto', 'chimichurri', 'picante', 'tabasco', 'sriracha', 'soya', 'soja', 'teriyaki',
            'patatas', 'chips', 'snack', 'snacks',
            'ensalada', 'preparado', 'comida lista', 'comidas listas', 'ready to eat',
            's√°ndwich', 'sandwiches', 's√°ndwiches', 'tortilla', 'wrap', 'wraps',
            'arabe', '√°rabe', 'hummus', 'falafel', 'tahini', 'baba ganoush',
            'thai', 'tailandes', 'tailand√©s', 'tailandesa', 'pad thai', 'curry thai'
        ];

        // Normalizar el mensaje para comparaci√≥n
        const normalizedMessage = message.toLowerCase()
            .normalize("NFD")
            .replace(/[\u0300-\u036f]/g, ""); // Eliminar acentos
            
        // Buscar t√©rminos validados en el mensaje
        for (const keyword of validatedKeywords) {
            // Normalizar el keyword para comparaci√≥n
            const normalizedKeyword = keyword.toLowerCase()
                .normalize("NFD")
                .replace(/[\u0300-\u036f]/g, "");
                
            // Verificar si el keyword est√° en el mensaje (como palabra completa o como parte de una frase)
            if (normalizedMessage.includes(normalizedKeyword)) {
                console.log(`Keyword validado encontrado: "${keyword}"`);
                return keyword;
            }
        }
        
        // Expresi√≥n regular para encontrar categor√≠as espec√≠ficas
        const keywordsRegex = /\b(aceitunas|encurtidos|az√∫car|cereales|condimentos|fideos|pastas|frutos secos|galletas|ketchup|mayonesa|mostaza|papas fritas|platos|ensaladas|salsa|sandwich|tortillas|comida √°rabe|comida thai)\b/gi;
        const matches = normalizedMessage.match(keywordsRegex);

        if (matches && matches.length > 0) {
            return matches[0].toLowerCase();
        }

        // Lista de palabras a excluir (stop words en espa√±ol)
        const stopWords = ['el', 'la', 'los', 'las', 'un', 'una', 'unos', 'unas',
                         'y', 'o', 'pero', 'si', 'no', 'como', 'que', 'al', 'del',
                         'lo', 'en', 'con', 'por', 'para', 'sin', 'sobre', 'bajo',
                         'tras', 'durante', 'mediante', 'hacia', 'desde', 'hasta',
                         'ante', 'de', 'a', 'mi', 'tu', 'su', 'sus', 'me', 'te', 'se', 'nos'];
                         
        // Fallback: usar las palabras m√°s significativas
        const words = message.split(' ')
            .map(w => w.toLowerCase().trim())
            .filter(word => 
                word.length > 3 && // Palabras m√°s largas son m√°s significativas
                !stopWords.includes(word) &&
                !/^\d+$/.test(word) // Excluir n√∫meros solos
            );
            
        // Si hay palabras significativas, devolver las 1-2 primeras
        if (words.length > 0) {
            return words.slice(0, Math.min(2, words.length)).join(' ');
        }
        
        // √öltimo recurso: devolver una versi√≥n limpia del mensaje
        return message.trim().split(' ').slice(0, 3).join(' ') || 'productos';
    };

    return {
        processMessage,
        isLoading,
        error
    };
};
