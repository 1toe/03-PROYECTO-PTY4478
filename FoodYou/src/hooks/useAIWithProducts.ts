import { useState } from 'react';
import { AIProductService, AIProductQuery } from '../services/ai/ai-product.service';
import { Producto } from '../services/supabase/product.service';
import { NLPUtils } from '../utils/nlp.utils';

interface AIResponse {
    message: string;
    products?: Producto[];
    isProductSearch?: boolean;
}

export const useAIWithProducts = () => {
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const processMessage = async (message: string): Promise<AIResponse> => {
        setIsLoading(true);
        setError(null);

        try {
            // Detectar si el mensaje est√° relacionado con b√∫squeda de productos
            // Palabras clave adaptadas a los productos en la base de datos Supabase
            const productSearchKeywords = [
                'buscar', 'producto', 'encontrar', 'precio', 'oferta', 'marca', 'categor√≠a',
                'comprar', 'd√≥nde', 'cu√°nto cuesta', 'recomendaci√≥n', 'alimento', 'comida',
                // Categor√≠as espec√≠ficas de la base de datos
                'aceitunas', 'encurtidos', 'az√∫car', 'cereales', 'condimentos', 'fideos', 'pastas',
                'frutos secos', 'galletas', 'ketchup', 'mayonesa', 'mostaza', 'papas fritas',
                'platos', 'ensaladas', 'salsa', 'sandwich', 'tortillas', 'comida √°rabe', 'comida thai'
            ];

            const isProductRelated = productSearchKeywords.some(keyword =>
                message.toLowerCase().includes(keyword)
            );

            if (isProductRelated) {
                return await handleProductSearch(message);
            } else {
                return await handleGeneralAIChat(message);
            }
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : 'Error desconocido';
            setError(errorMessage);
            return {
                message: 'Lo siento, ocurri√≥ un error al procesar tu mensaje. Por favor, intenta de nuevo.',
                isProductSearch: false
            };
        } finally {
            setIsLoading(false);
        }
    };

    const handleProductSearch = async (message: string): Promise<AIResponse> => {
        // Extraer informaci√≥n de b√∫squeda del mensaje
        const query = extractSearchQuery(message);

        try {
            // Llamar al servicio de IA para buscar productos
            const result = await AIProductService.searchProductsForAI(query);

            if (result.products.length === 0) {
                return {
                    message: `üîç No encontr√© productos que coincidan con "${query.query}". 

üí° **Sugerencias:**
‚Ä¢ Intenta con t√©rminos m√°s generales (ej: "yogurt" en lugar de "yogurt griego sabor frutilla")
‚Ä¢ Revisa la ortograf√≠a
‚Ä¢ Prueba con sin√≥nimos o marcas espec√≠ficas

¬øHay algo m√°s espec√≠fico que te gustar√≠a buscar?`,
                    products: [],
                    isProductSearch: true
                };
            }

            // Generar respuesta descriptiva con la informaci√≥n de productos
            const aiResponse = generateProductSearchResponse(message, result);
            
            // Agregar sugerencias de correcci√≥n si las hay
            const corrections = NLPUtils.suggestCorrections(query.query);
            let finalResponse = aiResponse;
            if (corrections.length > 0) {
                finalResponse = `üí° **Correcciones sugeridas:**\n${corrections.join('\n')}\n\n${aiResponse}`;
            }

            return {
                message: finalResponse,
                products: result.products.slice(0, 10), // Limitar a 10 productos para mejor visualizaci√≥n
                isProductSearch: true
            };
        } catch (error) {
            console.error('Error in product search:', error);
            return {
                message: 'Lo siento, ocurri√≥ un error al buscar productos. Por favor, intenta de nuevo.',
                products: [],
                isProductSearch: true
            };
        }
    };

    const handleGeneralAIChat = async (message: string): Promise<AIResponse> => {
        const lowerMessage = message.toLowerCase().normalize("NFD").replace(/\p{Diacritic}/gu, "").replace(/[^a-z0-9\s]/g, "");

        let response = '';

        // Detectar tipos de consultas y responder apropiadamente
        if (lowerMessage.includes('hola') || lowerMessage.includes('buenas') || lowerMessage.includes('saludos')) {
            response = `¬°Hola! üëã Soy tu asistente de FoodYou. 

Puedo ayudarte con:
üîç **B√∫squeda de productos** - Escribe "buscar [producto]"
üí∞ **Comparar precios** - Te muestro las mejores ofertas
üè∑Ô∏è **Informaci√≥n nutricional** - Detalles de ingredientes y al√©rgenos
‚ö†Ô∏è **Sellos de advertencia** - Informaci√≥n sobre productos
üõí **Sugerencias de compra** - Recomendaciones personalizadas

¬øQu√© te gustar√≠a buscar hoy?`;

        } else if (lowerMessage.includes('ayuda') || lowerMessage.includes('qu√© puedes hacer') || lowerMessage.includes('como funciona')) {
            response = 
            
            
            
            
`ü§ñ **¬øC√≥mo puedo ayudarte?**

**Para buscar productos:**
‚Ä¢ "buscar aceitunas"
‚Ä¢ "encontrar galletas"
‚Ä¢ "productos en oferta"
‚Ä¢ "marca espec√≠fica"

**Para informaci√≥n espec√≠fica:**
‚Ä¢ "precio de mayonesa"
‚Ä¢ "productos sin sellos"
‚Ä¢ "ofertas de la semana"

**Ejemplos √∫tiles:**
‚Ä¢ "buscar productos de condimentos baratos"
‚Ä¢ "encontrar cereales sin az√∫car"
‚Ä¢ "mostrar fideos en oferta"

¬°Simplemente describe lo que necesitas y yo te ayudo a encontrarlo! üõí`;

        } else if (lowerMessage.includes('oferta') || lowerMessage.includes('descuento') || lowerMessage.includes('rebaja')) {
            response = `üî• **¬°Excelente! Te ayudo a encontrar ofertas**

Para ver productos en oferta, puedes decirme:
‚Ä¢ "buscar productos en oferta"
‚Ä¢ "ofertas de [categor√≠a]" (ej: ofertas de aceitunas)
‚Ä¢ "descuentos en [marca]"

Tambi√©n puedo buscar por rango de precios:
‚Ä¢ "productos hasta $2000"
‚Ä¢ "ofertas de menos de $1000"

¬øQu√© tipo de ofertas te interesan? üí∞`;

        } else if (lowerMessage.includes('nutrici√≥n') || lowerMessage.includes('saludable') || lowerMessage.includes('al√©rgeno')) {
            response = `ü•ó **Informaci√≥n nutricional y saludable**

Puedo ayudarte a encontrar:
‚Ä¢ **Productos sin sellos** - "buscar productos sin sellos de advertencia"
‚Ä¢ **Bajos en sodio** - "productos bajos en sal"
‚Ä¢ **Sin az√∫car** - "productos sin az√∫car a√±adido"
‚Ä¢ **Informaci√≥n de al√©rgenos** - Te muestro qu√© contiene cada producto
‚Ä¢ **Sellos de advertencia** - "Alto en sodio", "Alto en az√∫cares", etc.

**Tip:** Cuando busques un producto, te mostrar√© toda su informaci√≥n nutricional y de al√©rgenos.

¬øTienes alguna restricci√≥n alimentaria espec√≠fica? üè•`;

        } else {
            response = `üí¨ Entiendo tu consulta sobre "${message}".

Para darte la mejor informaci√≥n sobre productos alimenticios, puedes:
üîç **Buscar productos espec√≠ficos** - "buscar [nombre del producto]"
üè™ **Explorar categor√≠as** - "productos de aceitunas", "fideos", etc.
üíµ **Comparar precios** - Te muestro diferentes opciones y ofertas

**¬øNecesitas ayuda para encontrar algo espec√≠fico?** 
Simplemente describe lo que buscas y yo te ayudo a encontrarlo en nuestra base de datos de productos. üõí`;
        }

        return {
            message: response,
            isProductSearch: false
        };
    };

    const generateProductSearchResponse = (userMessage: string, searchResult: any): string => {
        const { products, summary } = searchResult;

        let response = `üîç **Resultados para "${userMessage}"**\n\n`;

        if (summary.total > 0) {
            response += `üìä **Resumen:**\n`;
            response += `‚Ä¢ ${summary.total} productos encontrados\n`;

            if (summary.onOfferCount > 0) {
                response += `‚Ä¢ üî• ${summary.onOfferCount} productos en oferta\n`;
            }

            if (summary.priceRange.min > 0 && summary.priceRange.max > 0) {
                response += `‚Ä¢ üí∞ Precios desde $${summary.priceRange.min.toLocaleString()} hasta $${summary.priceRange.max.toLocaleString()}\n`;
            }

            if (summary.categories.length > 0) {
                response += `‚Ä¢ üìÇ Categor√≠as: ${summary.categories.slice(0, 3).join(', ')}${summary.categories.length > 3 ? ' y m√°s' : ''}\n`;
            }

            response += `\n`;
        }

        // Destacar ofertas si las hay
        if (summary.onOfferCount > 0) {
            response += `üî• **¬°Hay productos en oferta!** Revisa los precios con descuento.\n\n`;
        }

        // Agregar consejos √∫tiles
        response += `üí° **Consejos:**\n`;
        response += `‚Ä¢ Puedes tocar cualquier producto para ver m√°s detalles\n`;
        const warningDescriptions = ["Alto en Calor√≠as", "Alto en Grasas Saturadas", "Alto en Sodio", "Alto en Az√∫cares"];
        response += `‚Ä¢ Los productos con ‚ö†Ô∏è tienen sellos de advertencia nutricional. Por ejemplo: ${warningDescriptions.join(', ')}\n`;
        if (summary.onOfferCount > 0) {
            response += `‚Ä¢ Los precios en rojo indican ofertas especiales\n`;
        }

        response += `\n¬øTe gustar√≠a buscar algo m√°s espec√≠fico? üõí`;

        return response;
    };

    const extractSearchQuery = (message: string): AIProductQuery => {
        const lowerMessage = message.toLowerCase().normalize("NFD").replace(/\p{Diacritic}/gu, "").replace(/[^a-z0-9\s]/g, "");

        // Usar NLP para corregir y extraer t√©rminos de b√∫squeda
        let searchTerms = NLPUtils.extractCorrectedSearchTerms(message);
        
        // Si no se encontraron t√©rminos despu√©s de la correcci√≥n, usar el m√©todo original
        if (!searchTerms || searchTerms.trim().length === 0) {
            searchTerms = message;
            
            // Remover palabras comunes de b√∫squeda
            const removeWords = ['buscar', 'busca', 'busco', 'encuentro', 'encuentra', 'producto', 'productos', 'quiero', 'necesito', 'me puedes', 'puedes', 'mostrar', 'ver'];
            removeWords.forEach(word => {
                const regex = new RegExp(`\\b${word}\\b`, 'gi');
                searchTerms = searchTerms.replace(regex, '').trim();
            });
        }

        // Detectar filtros en el mensaje
        const filters: AIProductQuery['filters'] = {};

        // Detectar ofertas
        if (lowerMessage.includes('oferta') || lowerMessage.includes('descuento') || lowerMessage.includes('rebaja') || lowerMessage.includes('barato')) {
            filters.isOnOffer = true;
        }

        // Detectar rangos de precio
        const priceMatch = lowerMessage.match(/(?:menos de|hasta|m√°ximo)\s*\$?(\d+)/);
        if (priceMatch) {
            filters.maxPrice = parseInt(priceMatch[1]);
        }

        const minPriceMatch = lowerMessage.match(/(?:m√°s de|desde|m√≠nimo)\s*\$?(\d+)/);
        if (minPriceMatch) {
            filters.minPrice = parseInt(minPriceMatch[1]);
        }

        // Detectar marcas
        const brandMatch = lowerMessage.match(/marca\s+(\w+)/i);
        if (brandMatch) {
            filters.brand = brandMatch[1];
        }

        // Detectar categor√≠as espec√≠ficas de la base de datos
        const categoryKeywords = [
            'aceitunas', 'encurtidos', 'az√∫car', 'cereales', 'condimentos', 'fideos', 'pastas',
            'frutos secos', 'galletas', 'ketchup', 'mayonesa', 'mostaza', 'papas fritas',
            'platos', 'ensaladas', 'salsa', 'sandwich', 'tortillas', 'comida √°rabe', 'comida thai'
        ];

        for (const category of categoryKeywords) {
            if (lowerMessage.includes(category)) {
                // No establecemos directamente la categor√≠a aqu√≠, pero podemos
                // asegurarnos de que el t√©rmino de b√∫squeda incluya la categor√≠a
                if (!searchTerms.toLowerCase().includes(category)) {
                    searchTerms = searchTerms ? `${searchTerms} ${category}` : category;
                }
                break;
            }
        }

        // Limpiar t√©rminos de b√∫squeda finales
        searchTerms = searchTerms.replace(/\s+/g, ' ').trim();

        return {
            query: searchTerms || extractKeyWords(message),
            filters: Object.keys(filters).length > 0 ? filters : undefined,
            limit: 20
        };
    };

    const extractKeyWords = (message: string): string => {
        // Palabras clave espec√≠ficas de la base de datos
        const keywords = message.toLowerCase().match(/\b(aceitunas|encurtidos|az√∫car|cereales|condimentos|fideos|pastas|frutos secos|galletas|ketchup|mayonesa|mostaza|papas fritas|platos|ensaladas|salsa|sandwich|tortillas|comida √°rabe|comida thai)\b/g);

        if (keywords && keywords.length > 0) {
            return keywords[0];
        }

        // Fallback: usar las primeras palabras significativas
        const words = message.split(' ').filter(word => word.length > 2 && !['the', 'and', 'que', 'con', 'por', 'para', 'una', 'uno', 'del', 'las', 'los'].includes(word.toLowerCase()));
        return words.slice(0, 2).join(' ') || message;
    };

    return {
        processMessage,
        isLoading,
        error
    };
};
